#include<stdio.h>
#include<stdlib.h>

struct queue {
    int size;
    int rear;
    int front;
    int *arr;
};
int main() {
    struct queue q;
    q.size = 3;
    q.rear = -1;
    q.front = -1;
    q.arr = (int *)malloc(q.size*sizeof(int ));


    while(1) {
        int choice, val;
        printf("\n 1. insert\n 2. delete \n 3. display \n 4. exit\n");
        printf("Enter your choice : ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
            printf("Enter a val for insert\n");
            scanf("%d",&val);
            enqueue(&q,val);
            break;
            case 2:
            dequeue(&q);
            break;
            case 3:
            display(&q);
            break;
            case 4: 
            printf("exiting ..\n");
            break;
            default:
            printf("invalid digits\n");

        }
    }

}

int isempty(struct queue *q) {
    return (q->front==-1);
}

int isfull(struct queue *q) {
    return ((q->rear+1)%q->size==q->front);
}


int enqueue(struct queue *q,int val){
    if(isfull(q)) {
        printf("Queue is full and exit !\n");
        return -1;
    }
        if(q->front==-1) {
            q->front = q->rear = 0;
        }
        else { 
        q->rear = (q->rear+1)%q->size;
        }
        q->arr[q->rear] = val;
        printf("The enqueue val is %d\n",val);

        return val;
    }

    int dequeue(struct queue * q){
        if(isempty(q)) {
            printf("Queue is empty");
            return -1;
        }
        int val = q->arr[q->front];
        if q->front==q->rear) {
            q->front = q->rear = -1;
        }
       
        else {
            q->front = (q->front+1)%q->size;
        }
        printf("the dequeue val is %d\n",val);
        return val;
        
    }

    void display(struct queue *q){
        if (isempty(q)) {
            printf("Queue is empty\n");
            return;
        }
        else { 
            for(int i=q->front;  ; i= (i+1)%q->size){
                printf("%d :",q->arr[i]);
                if(i==q->rear) break;
            }
            
        }
  }
       
